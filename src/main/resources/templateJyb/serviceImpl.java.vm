package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.gientech.dadp.common.exception.AppException;
import com.gientech.dadp.common.util.MyBeanUtil;
import com.gientech.dadp.common.util.MyStringUtil;
import com.gientech.dadp.common.view.DataGrid;
import com.gientech.dadp.common.auth.UserSession;
import com.gientech.dadp.core.base.BaseService;
import cn.hutool.core.util.RandomUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.json.JSONUtil;
import lombok.extern.slf4j.Slf4j;

/**
 * ${table.comment}--Service
 * 
 * @author {author}
 */
@Slf4j
@Service
@Transactional
public class ${table.entityName}ServiceImpl extends BaseService<${table.entityName}Mapper, ${table.entityName}> {

    /**
     * 【1】查询和分页
     *
     * @param dto
     *
     * @return
     */
    public Page<${table.entityName}Vo> list${table.entityName}(${table.entityName}Form dto) {
        log.info("【list查询条件--${table.comment}】{}", dto);

        // 【1】 处理模糊查询条件的like(有3个方法addObjectLike，addObjectLikeLeft，addObjectLikeRight)
        MyStringUtil.addObjectLike(dto, "{searchConditionsAddLike}");

        // 【2】 数据权限查询条件（需要时去掉注释，复杂的场景另需调整Mapper.xml中的SQL，注意表别名不要重复）
        /*
        dto = getDataAuthFliter(
                dto,                                //实现DataAuthFilter接口的DTO类实例
                getBizTableName(),                  //业务表名
                "a",                                //业务表别名，注意不要与其他JOIN的表别名重复
                "ORG_ID",                           //业务表【机构ID】字段名
                "CREATE_USER_ID",                   //业务表【用户ID】字段名
                "T_SYS_ORG",                        //机构表名
                "da",                               //机构表别名，注意不要与其他JOIN的表别名重复
                "ORG_ID",                           //机构表【机构ID】字段名
                "ORG_LEVEL_CODE"                    //机构表【机构层次代码】字段名
        );
        log.debug("dataAuthJoinSql=\n{}", dto.getDataAuthJoinSql());
        log.debug("dataAuthFilterSql=\n{}", dto.getDataAuthFilterSql());
        */
        // 【3】构造分页参数
        Page<${table.entityName}Vo> page = new Page<>(dto.getPageNo(), dto.getPageSize());

        return page;
    }

    /**
     * 【2】新增--保存
     *
     * @param dto
     */
    public void save${table.entityName}(${table.entityName}Form dto) {
        log.info("【新增--${table.comment}】{}", dto);

        // 【1】 从dto中copy属性
        ${table.entityName} ${table.entityName} = new ${table.entityName}();
        MyBeanUtil.copyPropertiesIgnoreNull(dto,${table.entityName});

        // 【2】 校验业务唯一性, 其中: 可变参数field1, field2, ..., fieldn 是实体类属性名.
        //if (checkBizUnique(${table.entityName}, true, field1, field2, ..., fieldn)) {
        //    throw new AppException("新增失败，${table.comment}【" + field1+"-"+field2+"-"+...+"-"+fieldn + "】已经存在！");
        //}

        ${table.entityName}.setVer(1);// 数据版本
        this.save(${table.entityName});
    }

    /**
     * 【3】修改
     *
     * @param dto
     */
    public void update${table.entityName}(${table.entityName}Form dto) {
        log.info("【修改--${table.comment}】{}", dto);

        // 【1】 从dto中copy属性
        ${table.entityName} ${table.entityName} = new ${table.entityName}();
        MyBeanUtil.copyPropertiesIgnoreNull(dto,${table.entityName});

        // 【2】 校验业务唯一性, 其中: 可变参数field1, field2, ..., fieldn 是实体类属性名.
        //if (checkBizUnique(${table.entityName}, false, field1, field2, ..., fieldn)) {
        //    throw new AppException("更新失败，${table.comment}【" + field1+"-"+field2+"-"+...+"-"+fieldn + "】已经存在！");
        //}
        
        if (!this.updateById(${table.entityName})) {
            throw new AppException("更新失败，你修改的数据不是最新的，请刷新后重新操作！");
        }
    }

    /**
     * 【4】删除--多个id以逗号分隔
     *
     * @param ${table.entityName}Ids
     */
    public void delete${table.entityName}(String ${table.entityName}Ids) {
        log.info("【删除--${table.comment}{}】", ${table.entityName}Ids);

        // 【1】删除
        String[] ${table.entityName}IdArray = StrUtil.splitToArray(${table.entityName}Ids, ",");
        for (String ${table.entityName}Id : ${table.entityName}IdArray) {
            this.removeById(${table.entityName}Id);
        }
    }


}